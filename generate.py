import base64
import json
import re
import time
from io import BytesIO

import requests
import telebot
from PIL import Image
from openai import OpenAI
from telebot import types

from config import TELEGRAM_TOKEN, AI_TOKEN, FUSION_BRAIN_API_KEY, FUSION_BRAIN_SECRET_KEY

bot = telebot.TeleBot(TELEGRAM_TOKEN)

ai_client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=AI_TOKEN,
    default_headers={
        "HTTP-Referer": "https://github.com/yourusername/school-helper-bot",
        "X-Title": "School Quiz Bot",
    }
)

GRADE_SUBJECTS = {
    1: ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–æ–∫—Ä—É–∂–∞—é—â–∏–π –º–∏—Ä", "—á—Ç–µ–Ω–∏–µ", "—Ä–∏—Å–æ–≤–∞–Ω–∏–µ", "–º—É–∑—ã–∫–∞", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è", "—Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä–∞"],
    2: ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–æ–∫—Ä—É–∂–∞—é—â–∏–π –º–∏—Ä", "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–∫–∏—Ç–∞–π—Å–∫–∏–π —è–∑—ã–∫", "—á—Ç–µ–Ω–∏–µ", "—Ä–∏—Å–æ–≤–∞–Ω–∏–µ",
        "–º—É–∑—ã–∫–∞", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è", "—Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä–∞"],
    3: ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–æ–∫—Ä—É–∂–∞—é—â–∏–π –º–∏—Ä", "–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–µ —á—Ç–µ–Ω–∏–µ", "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–∫–∏—Ç–∞–π—Å–∫–∏–π —è–∑—ã–∫",
        "–º—É–∑—ã–∫–∞", "–ò–ó–û", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è", "—Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä–∞", "–û–†–ö–°–≠"],
    4: ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–æ–∫—Ä—É–∂–∞—é—â–∏–π –º–∏—Ä", "–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–µ —á—Ç–µ–Ω–∏–µ", "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–∫–∏—Ç–∞–π—Å–∫–∏–π —è–∑—ã–∫",
        "–º—É–∑—ã–∫–∞", "–ò–ó–û", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è", "—Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä–∞", "–û–†–ö–°–≠", "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞"],
    5: ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–∏—Å—Ç–æ—Ä–∏—è", "–±–∏–æ–ª–æ–≥–∏—è", "–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–≥–µ–æ–≥—Ä–∞—Ñ–∏—è",
        "–∫–∏—Ç–∞–π—Å–∫–∏–π —è–∑—ã–∫", "–º—É–∑—ã–∫–∞", "–ò–ó–û", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è", "—Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä–∞", "–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ"],
    6: ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–∏—Å—Ç–æ—Ä–∏—è", "–±–∏–æ–ª–æ–≥–∏—è", "–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–≥–µ–æ–≥—Ä–∞—Ñ–∏—è",
        "–∫–∏—Ç–∞–π—Å–∫–∏–π —è–∑—ã–∫", "–º—É–∑—ã–∫–∞", "–ò–ó–û", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è", "—Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä–∞", "–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ"],
    7: ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—Ñ–∏–∑–∏–∫–∞", "—Ö–∏–º–∏—è", "–±–∏–æ–ª–æ–≥–∏—è", "–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–≥–µ–æ–º–µ—Ç—Ä–∏—è", "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫",
        "–û–ë–ñ", "–∏—Å—Ç–æ—Ä–∏—è", "–≥–µ–æ–≥—Ä–∞—Ñ–∏—è", "–∫–∏—Ç–∞–π—Å–∫–∏–π —è–∑—ã–∫", "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è", "—Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä–∞",
        "–ò–ó–û"],
    8: ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—Ñ–∏–∑–∏–∫–∞", "—Ö–∏–º–∏—è", "–±–∏–æ–ª–æ–≥–∏—è", "–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–≥–µ–æ–º–µ—Ç—Ä–∏—è", "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫",
        "–û–ë–ñ", "–∏—Å—Ç–æ—Ä–∏—è", "–≥–µ–æ–≥—Ä–∞—Ñ–∏—è", "–∫–∏—Ç–∞–π—Å–∫–∏–π —è–∑—ã–∫", "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è", "—Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä–∞",
        "—á–µ—Ä—á–µ–Ω–∏–µ"],
    9: ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—Ñ–∏–∑–∏–∫–∞", "—Ö–∏–º–∏—è", "–±–∏–æ–ª–æ–≥–∏—è", "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–≥–µ–æ–º–µ—Ç—Ä–∏—è",
        "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–û–ë–ñ", "–∏—Å—Ç–æ—Ä–∏—è", "–≥–µ–æ–≥—Ä–∞—Ñ–∏—è", "–∫–∏—Ç–∞–π—Å–∫–∏–π —è–∑—ã–∫", "–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "—ç–∫–æ–Ω–æ–º–∏–∫–∞", "–ø—Ä–∞–≤–æ",
        "–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è"],
    10: ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—Ñ–∏–∑–∏–∫–∞", "—Ö–∏–º–∏—è", "–±–∏–æ–ª–æ–≥–∏—è", "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫",
         "–≥–µ–æ–º–µ—Ç—Ä–∏—è", "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–û–ë–ñ", "–∏—Å—Ç–æ—Ä–∏—è", "–≥–µ–æ–≥—Ä–∞—Ñ–∏—è", "–∫–∏—Ç–∞–π—Å–∫–∏–π —è–∑—ã–∫", "—ç–∫–æ–Ω–æ–º–∏–∫–∞", "–ø—Ä–∞–≤–æ",
         "–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è", "–µ—Å—Ç–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ"],
    11: ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—Ñ–∏–∑–∏–∫–∞", "—Ö–∏–º–∏—è", "–±–∏–æ–ª–æ–≥–∏—è", "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫",
         "–≥–µ–æ–º–µ—Ç—Ä–∏—è", "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–û–ë–ñ", "–∏—Å—Ç–æ—Ä–∏—è", "–≥–µ–æ–≥—Ä–∞—Ñ–∏—è", "–∫–∏—Ç–∞–π—Å–∫–∏–π —è–∑—ã–∫", "—ç–∫–æ–Ω–æ–º–∏–∫–∞", "–ø—Ä–∞–≤–æ",
         "–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è", "–µ—Å—Ç–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "–ú–•–ö"]
}


class FusionBrainAPI:
    def __init__(self):
        self.API_URL = "https://api-key.fusionbrain.ai/key/api/v1/"
        self.AUTH_HEADERS = {
            'X-Key': f'Key {FUSION_BRAIN_API_KEY}',
            'X-Secret': f'Secret {FUSION_BRAIN_SECRET_KEY}',
        }
        self.MODEL_ID = self._get_model_id()
        self.STYLES = self._get_available_styles()
        self.COOSHEN_ID = self._get_available_styles()

    def _get_model_id(self):
        try:
            response = requests.get(
                self.API_URL + 'pipelines',
                headers=self.AUTH_HEADERS,
                timeout=10
            )
            response.raise_for_status()
            data = response.json()
            return data[0]['id']
        except Exception as e:
            print(f"Error getting model ID: {str(e)}")
            return None

    @staticmethod
    def _get_available_styles():
        return ["DEFAULT", "UHD", "ANIME", "NEON", "DETAILED", "KANDINSKY", "3D_MODEL", "WATERCOLOR"]

    def generate(self, prompt, style="DEFAULT", width=1024, height=1024, negative_prompt=None):
        if not self.MODEL_ID:
            return None

        params = {
            "type": "GENERATE",
            "numImages": 1,
            "width": width,
            "height": height,
            "generateParams": {
                "query": prompt
            }
        }

        if style != "DEFAULT":
            params["style"] = style

        if negative_prompt:
            params["negativePromptDecoder"] = negative_prompt

        data = {
            'pipeline_id': (None, self.MODEL_ID),
            'params': (None, json.dumps(params), 'application/json')
        }

        try:
            response = requests.post(
                self.API_URL + 'pipeline/run',
                headers=self.AUTH_HEADERS,
                files=data,
                timeout=30
            )
            response.raise_for_status()
            return response.json()['uuid']
        except Exception as e:
            print(f"Generation error: {str(e)}")
            return None

    def check_generation_status(self, request_id, attempts=15, delay=10):
        for _ in range(attempts):
            try:
                response = requests.get(
                    self.API_URL + 'pipeline/status/' + request_id,
                    headers=self.AUTH_HEADERS,
                    timeout=10
                )
                data = response.json()

                if data['status'] == 'DONE':
                    return data['result']['files'][0] if data.get('result', {}).get('files') else None
                elif data['status'] == 'FAIL':
                    print(f"Generation failed: {data.get('errorDescription', 'Unknown error')}")
                    return None

                time.sleep(delay)
            except Exception as e:
                print(f"Status check error: {str(e)}")
                time.sleep(delay)
        return None


try:
    fusion_api = FusionBrainAPI()
except Exception as e:
    print(f"FusionBrainAPI init error: {str(e)}")
    fusion_api = None


def format_text(text):
    text = text.replace('###', '-')
    parts = text.split('**')
    for i in range(1, len(parts), 2):
        parts[i] = f'<b>{parts[i]}</b>'
    return ''.join(parts)


def generate_ai_question(grade, subject, max_attempts=5):
    prompt = f"""
    –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –≤–æ–ø—Ä–æ—Å –¥–ª—è {grade} –∫–ª–∞—Å—Å–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É "{subject}" –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    "—Ç–µ–∫—Å—Ç–≤–æ–ø—Ä–æ—Å–∞_–æ—Ç–≤–µ—Ç1_–æ—Ç–≤–µ—Ç2_–æ—Ç–≤–µ—Ç3_–æ—Ç–≤–µ—Ç4_–Ω–æ–º–µ—Ä–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ–æ—Ç–≤–µ—Ç–∞"

    –ü—Ä–∞–≤–∏–ª–∞:
    1. –¢–æ–ª—å–∫–æ 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
    2. –ù–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (1-4)
    3. –†–∞–∑–¥–µ–ª—è–π —á–∞—Å—Ç–∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º
    4. –ë–µ–∑ –∫–∞–≤—ã—á–µ–∫
    5. –ü—Ä–∏–º–µ—Ä: –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2+2?_4_5_6_7_1
    """

    for attempt in range(max_attempts):
        try:
            response = ai_client.chat.completions.create(
                model="deepseek/deepseek-chat",
                messages=[{"role": "user", "content": prompt}],
                temperature=1.5,
                max_tokens=200
            )
            question_data = response.choices[0].message.content.strip()

            if validate_question(question_data):
                return question_data

        except Exception as e:
            print(f"Question generation error: {e}")

        time.sleep(1)
    return None


def validate_question(question):
    parts = question.split('_')
    return len(parts) == 6 and parts[5] in ['1', '2', '3', '4']


def create_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton('üìö –û–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ–º—É'),
        types.KeyboardButton('üìù –¢–µ—Å—Ç'),
        types.KeyboardButton('üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'),
        types.KeyboardButton('üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä'),
        types.KeyboardButton('‚ÑπÔ∏è –û –±–æ—Ç–µ')
    ]
    markup.add(*buttons)
    return markup


def add_back_button(markup):
    markup.add(types.KeyboardButton('üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é'))
    return markup


def generate_recommendations(topic):
    prompt = f"""
    –ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º—ã "{topic}" —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π 2 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏–∑—É—á–µ–Ω–∏—è.
    –§–æ—Ä–º–∞—Ç: –ø–µ—Ä–≤–∞—è—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è_–≤—Ç–æ—Ä–∞—è—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
    –ë–µ–∑ –∫–∞–≤—ã—á–µ–∫, —Ä–∞–∑–¥–µ–ª—è–π –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º.
    –ü—Ä–∏–º–µ—Ä: —Ç–µ–±–µ –¥–æ —ç—Ç–æ–≥–æ –∑–∞–¥–∞–ª–∏ –î—Ä–æ–±–∏ –∫–∞–∫ —Ç–µ–º—É –∏ —Ç—ã –¥–æ–ª–∂–µ–Ω –≤ —Å–≤–æ–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞–ø–∏—Å–∞—Ç—å "–ß—Ç–æ —Ç–∞–∫–æ–µ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å_–î–µ—Å—è—Ç–∏—á–Ω—ã–µ –¥—Ä–æ–±–∏"
    """

    try:
        response = ai_client.chat.completions.create(
            model="deepseek/deepseek-chat",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=200
        )
        recommendations = response.choices[0].message.content.strip()
        if '_' in recommendations and len(recommendations.split('_')) == 2:
            return recommendations
    except:
        pass
    return "—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ_–∏–∑—É—á–∏—Ç—å —Å–º–µ–∂–Ω—ã–µ —Ç–µ–º—ã"


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    try:
        with open('hello.jpeg', 'rb') as photo:
            bot.send_photo(message.chat.id, photo)
    except:
        pass

    text = format_text("""
    üëã –ü—Ä–∏–≤–µ—Ç! –Ø - —Ç–≤–æ–π —à–∫–æ–ª—å–Ω—ã–π –ò–ò –ø–æ–º–æ—â–Ω–∏–∫

    üìö –ú–æ–≥—É –æ–±—ä—è—Å–Ω–∏—Ç—å –ª—é–±—É—é —Ç–µ–º—É
    üìù –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è
    üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
    üßÆ –ü—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è

    –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:
    """)

    bot.send_message(
        message.chat.id,
        text,
        reply_markup=create_main_menu(),
        parse_mode='HTML'
    )


@bot.message_handler(func=lambda m: m.text == '‚ÑπÔ∏è –û –±–æ—Ç–µ')
def about_bot(message):
    try:
        with open('info.jpeg', 'rb') as photo:
            bot.send_photo(message.chat.id, photo)
    except:
        pass

    text = format_text("""
    ü§ñ –®–∫–æ–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫

    –í–µ—Ä—Å–∏—è: 3.0
    –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:
    - OpenAI API
    - Kandinsky 3.1
    - Python 3.10
    """)

    bot.send_message(
        message.chat.id,
        text,
        reply_markup=create_main_menu(),
        parse_mode='HTML'
    )


@bot.message_handler(func=lambda m: m.text == 'üìù –¢–µ—Å—Ç')
def start_quiz(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    buttons = [types.KeyboardButton(f'{i} –∫–ª–∞—Å—Å') for i in range(1, 12)]
    markup.add(*buttons)
    markup = add_back_button(markup)

    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫–ª–∞—Å—Å:",
        reply_markup=markup
    )


@bot.message_handler(func=lambda m: re.match(r'^\d+ –∫–ª–∞—Å—Å$', m.text))
def handle_grade(message):
    grade = int(message.text.split()[0])
    if grade not in GRADE_SUBJECTS:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–ª–∞—Å—Å")
        return send_welcome(message)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [types.KeyboardButton(subject) for subject in GRADE_SUBJECTS[grade]]
    markup.add(*buttons)
    markup = add_back_button(markup)

    bot.send_message(
        message.chat.id,
        f"–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∞ ({grade} –∫–ª–∞—Å—Å):",
        reply_markup=markup
    )
    bot.register_next_step_handler(message, handle_subject, grade)


def handle_subject(message, grade):
    if message.text == 'üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é':
        return send_welcome(message)

    subject = message.text
    if subject not in GRADE_SUBJECTS[grade]:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞")
        return start_quiz(message)

    bot.send_message(message.chat.id, "üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–æ–ø—Ä–æ—Å...")

    question_data = generate_ai_question(grade, subject)
    if not question_data:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return send_welcome(message)

    parts = question_data.split('_')
    question = parts[0]
    answers = parts[1:5]
    correct_num = int(parts[5]) - 1

    bot.register_next_step_handler(
        message,
        check_answer,
        correct=answers[correct_num],
        subject=subject,
        grade=grade
    )

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for ans in answers:
        markup.add(types.KeyboardButton(ans))
    markup = add_back_button(markup)

    bot.send_message(
        message.chat.id,
        f"‚ùì –í–æ–ø—Ä–æ—Å ({subject}, {grade} –∫–ª–∞—Å—Å):\n\n{question}",
        reply_markup=markup
    )


def check_answer(message, correct, subject, grade):
    if message.text == 'üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é':
        return send_welcome(message)

    if message.text == correct:
        reply = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü!"
    else:
        reply = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}"

    bot.send_message(message.chat.id, reply)

    recommendations = generate_recommendations(subject)
    rec1, rec2 = recommendations.split('_')

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton(rec1))
    markup.add(types.KeyboardButton(rec2))
    markup.add(types.KeyboardButton('üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é'))

    bot.send_message(
        message.chat.id,
        "üìö –í–æ–∑–º–æ–∂–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ–± —ç—Ç–æ–º:",
        reply_markup=markup
    )

    bot.register_next_step_handler(
        message,
        handle_recommendation,
        subject=subject,
        grade=grade,
        prev_recommendations=[rec1, rec2]
    )


def handle_recommendation(message, subject, grade, prev_recommendations=None):
    if prev_recommendations is None:
        prev_recommendations = []

    if message.text == 'üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é':
        return send_welcome(message)

    if message.text in prev_recommendations:
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –æ–¥–Ω–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –ø—Ä–æ—Å—Ç–æ –æ–±—ä—è—Å–Ω—è–µ–º –µ–µ
        topic = message.text
    else:
        # –ò–Ω–∞—á–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        topic = message.text
        recommendations = generate_recommendations(topic)
        rec1, rec2 = recommendations.split('_')
        prev_recommendations = [rec1, rec2]

    bot.send_message(message.chat.id, f"üîÑ –ì–æ—Ç–æ–≤–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ: {topic}...")

    try:
        response = ai_client.chat.completions.create(
            model="deepseek/deepseek-chat",
            messages=[{
                "role": "system",
                "content": "–¢—ã - —É—á–∏—Ç–µ–ª—å –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤. –û–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ, —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏."
            }, {
                "role": "user",
                "content": f"–û–±—ä—è—Å–Ω–∏ —Ç–µ–º—É '{topic}' –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–∞ {grade} –∫–ª–∞—Å—Å–∞"
            }],
            temperature=0.7,
            max_tokens=1500
        )

        explanation = format_text(response.choices[0].message.content)

        if len(explanation) > 4000:
            for x in range(0, len(explanation), 4000):
                bot.send_message(message.chat.id, explanation[x:x + 4000], parse_mode='HTML')
        else:
            bot.send_message(message.chat.id, explanation, parse_mode='HTML')
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    # –ü–æ—Å–ª–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Å–Ω–æ–≤–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = generate_recommendations(topic)
    rec1, rec2 = recommendations.split('_')

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton(rec1))
    markup.add(types.KeyboardButton(rec2))
    markup.add(types.KeyboardButton('üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é'))

    bot.send_message(
        message.chat.id,
        "üìö –í–æ–∑–º–æ–∂–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ–± —ç—Ç–æ–º:",
        reply_markup=markup
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    bot.register_next_step_handler(
        message,
        handle_recommendation,
        subject=subject,
        grade=grade,
        prev_recommendations=[rec1, rec2]
    )


@bot.message_handler(func=lambda m: m.text == 'üìö –û–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ–º—É')
def request_topic(message):
    bot.send_message(
        message.chat.id,
        "üìù –ù–∞–ø–∏—à–∏, –∫–∞–∫—É—é —Ç–µ–º—É –æ–±—ä—è—Å–Ω–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–¥—Ä–æ–±–∏', '–ø—Ä–æ—Ü–µ–Ω—Ç—ã', '–ø–∞–¥–µ–∂–∏'):",
        reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add('üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é')
    )
    bot.register_next_step_handler(message, explain_topic)


def explain_topic(message):
    if message.text == 'üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é':
        return send_welcome(message)

    topic = message.text
    bot.send_message(message.chat.id, f"üîÑ –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ '{topic}'...")

    try:
        response = ai_client.chat.completions.create(
            model="deepseek/deepseek-chat",
            messages=[{
                "role": "system",
                "content": "–¢—ã - —É—á–∏—Ç–µ–ª—å –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤. –û–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ, —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏."
            }, {
                "role": "user",
                "content": f"–û–±—ä—è—Å–Ω–∏ —Ç–µ–º—É '{topic}' –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–∞"
            }],
            temperature=0.7,
            max_tokens=1500
        )

        explanation = format_text(response.choices[0].message.content)

        if len(explanation) > 4000:
            for x in range(0, len(explanation), 4000):
                bot.send_message(message.chat.id, explanation[x:x + 4000], parse_mode='HTML')
        else:
            bot.send_message(message.chat.id, explanation, parse_mode='HTML')

        recommendations = generate_recommendations(topic)
        rec1, rec2 = recommendations.split('_')

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton(rec1))
        markup.add(types.KeyboardButton(rec2))
        markup.add(types.KeyboardButton('üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é'))

        bot.send_message(
            message.chat.id,
            "üìö –í–æ–∑–º–æ–∂–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ–± —ç—Ç–æ–º:",
            reply_markup=markup
        )

        bot.register_next_step_handler(
            message,
            handle_recommendation,
            subject=topic,
            grade=5,
            prev_recommendations=[rec1, rec2]
        )

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        send_welcome(message)


@bot.message_handler(func=lambda m: m.text == 'üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')
def start_image_generation(message):
    if not fusion_api:
        bot.send_message(message.chat.id, "‚ùå –°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return send_welcome(message)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton('üñºÔ∏è –û–±—ã—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'),
        types.KeyboardButton('‚úèÔ∏è –ö–æ–Ω—Ç—É—Ä–Ω—ã–π —Ä–∏—Å—É–Ω–æ–∫'),
        types.KeyboardButton('üåà –í—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å')
    ]
    markup.add(*buttons)
    markup = add_back_button(markup)

    bot.send_message(
        message.chat.id,
        "üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:\n\n–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
        reply_markup=markup
    )


@bot.message_handler(func=lambda m: m.text == 'üåà –í—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å')
def choose_style(message):
    if not fusion_api:
        bot.send_message(message.chat.id, "‚ùå –°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return send_welcome(message)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [types.KeyboardButton(style) for style in fusion_api.STYLES[:10]]
    markup.add(*buttons)
    markup = add_back_button(markup)

    bot.send_message(
        message.chat.id,
        "üñº –í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",
        reply_markup=markup
    )
    bot.register_next_step_handler(message, process_style_selection)


def process_style_selection(message):
    if message.text == 'üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é':
        return send_welcome(message)

    if not fusion_api or message.text not in fusion_api.STYLES:
        bot.send_message(message.chat.id, "‚ùå –í—ã–±—Ä–∞–Ω –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∏–ª—å")
        return start_image_generation(message)

    if not hasattr(bot, 'session_data'):
        bot.session_data = {}

    bot.session_data[message.chat.id] = {'style': message.text}
    bot.send_message(
        message.chat.id,
        f"‚úÖ –í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: {message.text}\n\n–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å:",
        reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add('üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é')
    )
    bot.register_next_step_handler(message, process_image_generation)


@bot.message_handler(func=lambda m: m.text in ['üñºÔ∏è –û–±—ã—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', '‚úèÔ∏è –ö–æ–Ω—Ç—É—Ä–Ω—ã–π —Ä–∏—Å—É–Ω–æ–∫'])
def handle_image_type(message):
    if not fusion_api:
        bot.send_message(message.chat.id, "‚ùå –°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return send_welcome(message)

    image_type = 'standard' if message.text == 'üñºÔ∏è –û–±—ã—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' else 'contour'

    if not hasattr(bot, 'session_data'):
        bot.session_data = {}

    bot.session_data[message.chat.id] = {'image_type': image_type}

    if image_type == 'contour':
        bot.session_data[message.chat.id]['style'] = 'DEFAULT'
        bot.session_data[message.chat.id]['negative_prompt'] = "—Ü–≤–µ—Ç–∞, –∑–∞–ª–∏–≤–∫–∞, —Ç–µ–Ω–∏, –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã"

    bot.send_message(
        message.chat.id,
        "‚úèÔ∏è –û–ø–∏—à–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å:",
        reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add('üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é')
    )
    bot.register_next_step_handler(message, process_image_generation)


def process_image_generation(message):
    if message.text == 'üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é':
        return send_welcome(message)

    if not fusion_api:
        bot.send_message(message.chat.id, "‚ùå –°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return send_welcome(message)

    if not hasattr(bot, 'session_data') or message.chat.id not in bot.session_data:
        bot.session_data = {message.chat.id: {}}

    chat_data = bot.session_data.get(message.chat.id, {})
    prompt = message.text
    style = chat_data.get('style', 'DEFAULT')
    negative_prompt = chat_data.get('negative_prompt', None)

    if chat_data.get('image_type') == 'contour':
        prompt = f"–∫–æ–Ω—Ç—É—Ä–Ω—ã–π —Ä–∏—Å—É–Ω–æ–∫ {prompt}, —á–µ—Ä–Ω–æ-–±–µ–ª—ã–π, –±–µ–∑ –∑–∞–ª–∏–≤–∫–∏, —Ç–æ–ª—å–∫–æ –ª–∏–Ω–∏–∏, —Å –Ω–∏–∑–∫–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π, –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û —Å–≤–µ—Ç–ª—ã–π —Ä–∏—Å—É–Ω–æ–∫, –±–µ–∑ –∑–∞–ª–∏–≤–∫–∏-"

    bot.send_message(message.chat.id, "üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 2 –º–∏–Ω—É—Ç.")

    try:
        uuid = fusion_api.generate(
            prompt=prompt,
            style=style,
            negative_prompt=negative_prompt
        )

        if not uuid:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")

        image_data = fusion_api.check_generation_status(uuid)

        if not image_data:
            raise Exception("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

        image_bytes = base64.b64decode(image_data)
        img = Image.open(BytesIO(image_bytes))

        img_byte_arr = BytesIO()
        img.save(img_byte_arr, format='PNG')
        img_byte_arr.seek(0)

        bot.send_photo(message.chat.id, img_byte_arr)
        bot.send_message(
            message.chat.id,
            "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!",
            reply_markup=create_main_menu())
        bot.send_message(
            message.chat.id,
            "‚úÖ –°–æ–≤–µ—Ç. –í–æ–∑—å–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –±–æ–ª—å—à–∏–º —ç–∫—Ä–∞–Ω–æ–º –∏ –ø–æ–¥–ª–æ–∂–∏ –µ–≥–æ –ø–æ–¥ –ª–∏—Å—Ç –±—É–º–∞–≥–∏. –î–∞–ª–µ–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–æ–¥–∏ –∫–æ–Ω—Ç—É—Ä –ø–æ –∫–æ–Ω—Ç—É—Ä–∞–º,–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Å–≤–µ—á–∏–≤–∞—é—Ç",
            reply_markup=create_main_menu()
        )

    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}",
            reply_markup=create_main_menu()
        )

    if message.chat.id in bot.session_data:
        del bot.session_data[message.chat.id]


@bot.message_handler(func=lambda m: m.text == 'üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä')
def calculator(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)
    buttons = [
        types.KeyboardButton('7'), types.KeyboardButton('8'), types.KeyboardButton('9'), types.KeyboardButton('/'),
        types.KeyboardButton('4'), types.KeyboardButton('5'), types.KeyboardButton('6'), types.KeyboardButton('*'),
        types.KeyboardButton('1'), types.KeyboardButton('2'), types.KeyboardButton('3'), types.KeyboardButton('-'),
        types.KeyboardButton('0'), types.KeyboardButton('.'), types.KeyboardButton('='), types.KeyboardButton('+'),
        types.KeyboardButton('C'), types.KeyboardButton('üö™ –í—ã—Ö–æ–¥'),
        types.KeyboardButton('üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é')
    ]
    markup.add(*buttons)

    bot.send_message(
        message.chat.id,
        "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n\n–¢–µ–∫—É—â–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: \n(–ø—É—Å—Ç–æ)",
        reply_markup=markup
    )
    bot.register_next_step_handler(message, process_calculation, current_expression="")


def process_calculation(message, current_expression):
    if message.text in ['üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é', 'üö™ –í—ã—Ö–æ–¥']:
        return send_welcome(message)

    if message.text == 'C':
        current_expression = ""
    elif message.text == '=':
        try:
            if not re.match(r'^[\d+\-*/.() ]+$', current_expression):
                raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏")

            result = eval(current_expression)
            current_expression = str(result)
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            return calculator(message)
    else:
        current_expression += message.text

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)
    buttons = [
        types.KeyboardButton('7'), types.KeyboardButton('8'), types.KeyboardButton('9'), types.KeyboardButton('/'),
        types.KeyboardButton('4'), types.KeyboardButton('5'), types.KeyboardButton('6'), types.KeyboardButton('*'),
        types.KeyboardButton('1'), types.KeyboardButton('2'), types.KeyboardButton('3'), types.KeyboardButton('-'),
        types.KeyboardButton('0'), types.KeyboardButton('.'), types.KeyboardButton('='), types.KeyboardButton('+'),
        types.KeyboardButton('C'), types.KeyboardButton('üö™ –í—ã—Ö–æ–¥'),
        types.KeyboardButton('üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é')
    ]
    markup.add(*buttons)

    bot.send_message(
        message.chat.id,
        f"üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n\n–¢–µ–∫—É—â–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {current_expression}",
        reply_markup=markup
    )
    bot.register_next_step_handler(message, process_calculation, current_expression=current_expression)
    return None


@bot.message_handler(func=lambda m: m.text == 'üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é')
def back_to_main(message):
    send_welcome(message)


@bot.message_handler(func=lambda m: True)
def handle_other_messages(message):
    bot.send_message(
        message.chat.id,
        "–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=create_main_menu()
    )


if not hasattr(bot, 'session_data'):
    bot.session_data = {}

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()